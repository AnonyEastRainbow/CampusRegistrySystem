# Unique name for this workflow
name: Validate Pull Request

# Definition when the workflow should run
on:
  # The workflow will run whenever an event happens on a pull request
  pull_request:
    # The events are that a PR is opened, or when a commit is pushed
    # to a branch that has an existing pull request
    types: [ opened, edited, synchronize, reopened ]
    # The branches filter allows to specify that this workflow should only
    # run if the branch name is [ SIT, UAT, PreProd, main ]. This way we prevent this workflow
    # from running when PRs are opened on other branches
    branches: [ SIT, UAT, PreProd, main ]
    # We only care about changes to the force-app directory, which is the
    # root directory of the sfdx project. This prevents the job from running
    # when changing non-salesforce files (like this yml file).
    paths:
      - 'force-app/**'


# Jobs to be executed when the above conditions are met
jobs:
  # This is the name of the job. You can give it whatever name you want
  validate-deployment-on-target-org:
    name: Validate Deployment on target org
    # As mentioned in the blog post, this job runs inside a VM. Here we
    # can specify which OS this VM should run on.
    # In this case, we are going to run our commands on the latest version
    # of ubuntu
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # Now we install node.js in the VM, and specify version 20
      - name: 'Setup node.js version'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # The idea is that the VM can access your remote repository
      # because your repository is an sfdx project.
      # This is a default action that allows us to enter the root
      # directory of the repository

      # Make sure to specify fetch-depth:0. This allows us to
      # access previous commits that have been pushed to the repository.

      # We'll need this later when we try to figure out which metadata has
      # changed between commits, so that we can only deploy that metadata
      # to the destination org

      - name: 'Checkout source code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Now, we need a way to let the developer specify which tests to run, which
      # could be all tests or just the tests relevant to their deployment.

      # To do this, we can ask the developer to name their test classes in the
      # body of the PR, using the following syntax

      # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
      # or Apex::[all]::Apex to run all tests

      # This special delimeter can be added to the PR template so that your
      # team doesn't have to remember the syntax.

      # Once a developer has specified a list of classes to run, we need to be able
      # to extract this information from the PR, and pass it on the the VM.

      - name: 'Parse test classes to run from Pull Request description'
        env:
          # The pull request body is available through the github context object
          # we put the body of the pull request in an env variable (only available to this step)
          PR_BODY: ${{github.event.pull_request.body}}

        # Here we print the content of the environment variable and
        # pipe to a a text file.

        # Then we call the local script parsePR.js, which will create
        # a new file called testsToRun.txt. This file will have the list
        # of tests to run separated by a comma

        # Finally, we add the list of tests to the $GITHUB_ENV variable
        # as this allows us to reference the list in a subsequent step.  If you
        # were using a normal env variable, its value would not be available outside this step.
        run: |
          echo Pull Request description: $PR_BODY
          echo $PR_BODY > ./cicd/pr_body.txt
          node ./cicd/parsePR.js
          testsToRun=$(cat ./cicd/testsToRun.txt)
          echo Tests to run: $testsToRun
          echo "apexTestsToRun=$testsToRun" >> $GITHUB_ENV

      # Now Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
          mkdir -p ~/cli/sf
          tar xJf sf-linux-x64.tar.xz -C ~/cli/sf --strip-components 1
          echo "~/cli/sf/bin" >> $GITHUB_PATH
          ~/cli/sf/bin/sf version

      # Prior to setting up this workflow, you have to create a Github Secret
      # that contains the sfdx url of the integration/qa org.

      # The steps to generate the url are here
      # https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_auth_sfdxurl.htm

      # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
      # the sfdx project in the repositry, against the org from which the URL
      # was generated from. This works just like that, there's no need to create
      # connected apps or any else.

      # The URL is stored in the Github Secret
      # so here we store the URL into a text file
      - name: 'Populate auth file(SIT)'
        if: ${{ github.base_ref == 'SIT' }}
        shell: bash
        run: |
          echo '${{ secrets.SFDX_SIT_ORG_AUTH }}' > ./SFDX_ORG_AUTH.json

      - name: 'Populate auth file(UAT)'
        if: ${{ github.base_ref == 'UAT' }}
        shell: bash
        run: |
          echo '${{ secrets.SFDX_UAT_ORG_AUTH }}' > ./SFDX_ORG_AUTH.json

      - name: 'Populate auth file(PreProd)'
        if: ${{ github.base_ref == 'PreProd' }}
        shell: bash
        run: |
          echo '${{ secrets.SFDX_PreProd_ORG_AUTH }}' > ./SFDX_ORG_AUTH.json

      - name: 'Populate auth file(Production)'
        if: ${{ github.base_ref == 'main' }}
        shell: bash
        run: |
          echo '${{ secrets.SFDX_Prod_ORG_AUTH }}' > ./SFDX_ORG_AUTH.json

      # Authenticate to org using the URL stored in the text file
      - name: 'Authenticate to org'
        run: sfdx auth:sfdxurl:store --sfdxurlfile ./SFDX_ORG_AUTH.json --setdefaultusername

      # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
      # This is an awesome plugin that allows us to extract a package.xml with the metadata
      # that has changed between commits. I highly recommend going over the github readme
      # for more information on how this works.
      - name: 'Install sfdx git delta'
        run: |
          sfdx version
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins 
      
      # We use SFDX Git Delta to create a directory with only the metadata that has changed.
      # this allows us to deploy only those changes, as opposed to deploying the entire branch.
      # This helps reducing deployment times
      - name: 'Create delta packages for new, modified or deleted metadata'
        run: |
          mkdir changed-sources
          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 

      # Upload delta packages to Artifact for download
      - name: Upload delta packages to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: changed-sources-package
          path: changed-sources/

      # We do a check-only deploy and we only run the tests specified in the PR
      # If the env variable does not equal 'all', we know that there is a list of
      # tests that can be run
      - name: 'Check-only deploy delta changes - skip tests'
        if: ${{ env.apexTestsToRun == '' }}
        run: |
          sfdx force:source:deploy --manifest "changed-sources/package/package.xml" --postdestructivechanges "changed-sources/destructiveChanges/destructiveChanges.xml" --checkonly --verbose

      - name: 'Check-only deploy delta changes - run specified tests'
        if: ${{ env.apexTestsToRun != '' && env.apexTestsToRun != 'all' }}
        run: |
          sfdx force:source:deploy --manifest "changed-sources/package/package.xml" --postdestructivechanges "changed-sources/destructiveChanges/destructiveChanges.xml" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.apexTestsToRun}} --verbose

      # If the env variable equals all, we run all tests
      - name: 'Check-only deploy delta changes - run all tests'
        if: ${{ env.apexTestsToRun == 'all' }}
        run: |
          sfdx force:source:deploy --manifest "changed-sources/package/package.xml" --postdestructivechanges "changed-sources/destructiveChanges/destructiveChanges.xml" --checkonly --testlevel RunLocalTests --verbose